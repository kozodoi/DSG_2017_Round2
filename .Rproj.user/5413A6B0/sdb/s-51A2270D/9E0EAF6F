{
    "collab_server" : "",
    "contents" : "setwd(\"~/Documents/HU_Berlin/ML/R train/online_stage\")\nsource(\"~/Documents/HU_Berlin/ML/R train/online_stage/functions/functions_alex.R\")\n\nlibrary(data.table)\nlibrary(xgboost)\nlibrary(caret)\nlibrary(stringr)\nlibrary(quanteda)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(Hmisc)\nlibrary(Matrix)\nlibrary(plyr)\nlibrary(dplyr)\n\nlibrary(vtreat)\nlibrary(psych)  #dummy coding\n\nlibrary(svd)\nlibrary(sparsesvd)\nlibrary(lsa) # cosine for not sparce\nlibrary(qlcMatrix)\nlibrary(kernlab)\nlibrary(sparcl)\nlibrary(fastcluster)\n\n\n###################################\n#                                 #\n#         DATA PREPARATION        #\n#                                 #\n###################################\n\n# setting inner folders\ncode.folder <- \"codes\"\ndata.folder <- \"data\"\nfunc.folder <- \"functions\"\nsubm.folder <- \"submissions\"\n\n########## 1. LOADING THE DATA ####\n\n# loading training data\ndata.train <- fread(file.path(data.folder, \"train.csv\"), sep = \",\", dec = \".\", header = TRUE)\n\n\n\nsample <- sample.int(n = nrow(data.train), size = floor(0.7*nrow(data.train)), replace = F)\ndata.tr <- data.train[sample, ]\ndata.test <-  data.train[-sample, ]\ndata.train = data.tr\n\n\n\n# loading testing data\n#data.test <- fread(file.path(data.folder, \"test.csv\"), sep = \",\", dec = \".\", header = TRUE)\n#data.train$sample_id<-NA\n\ndata_test_labels = data.test$is_listened\n\ndata.test$is_listened <- NA\ndata.train$dataset <- \"train\"\ndata.test$dataset<- \"unknown\"\ndata.full <- rbind(data.train, data.test)\n\n\n\n####### FEATUR ENEGENEERING ##########\n\ndata.table.full = data.table(data.full)\n\n\n#introduce age group\ndata.table.full$age_group = as.factor(round(data.table.full$user_age/5,0))\nlevels(data.table.full$age_group)\n\n\n###################################################################################### SVD ###################################################################################### \n\n\n\n#data.table.full_NAto0$user_id_id = as.numeric(as.factor(data.table.full_NAto0$user_id))\n#data.table.full_NAto0$media_id_id = as.numeric(as.factor(data.table.full_NAto0$media_id))\n\ndata.table.full$user_id_id = as.numeric(as.factor(data.table.full$user_id))\ndata.table.full$media_id_id = as.numeric(as.factor(data.table.full$media_id))\n\ndata.table.full_NAto0 =data.table.full[!is.na(is_listened)]\n\n\nlength(unique(data.table.full_NAto0$user_id))\n\nsparce_UserMeadia <- sparseMatrix(i = data.table.full_NAto0$user_id_id,\n                                  j = data.table.full_NAto0$media_id_id,\n                                  x = data.table.full_NAto0$is_listened)\n\n\n\nsvd = sparsesvd(sparce_UserMeadia, 500)\ndiag = Diagonal(  500  )\ndiag(diag) = svd$d\nUserView = svd$u %*% diag\n\nset.seed(20)\nwss5 <- sapply(c(1000, 1500, 2000, 2500, 3000),function(k){\n  print(k)\n  kmeans(UserView, k, nstart=10,iter.max = 15 )$tot.withinss})\n\nwss\nwss2\n\nplot(c(8:30, 35,40,45,50,60,70,80,90,100,150, 200, 300, 400, 500, 1000, 1500, 2000, 2500, 3000), c(wss, wss2[2:5],wss3, wss4, wss5),\n     type=\"b\", pch = 19, frame = FALSE, \n     xlab=\"Number of clusters K\",\n     ylab=\"Total within-clusters sum of squares\") \n\n\nclusters = kmeans(UserView, 1500, nstart = 20)\nclusters$cluster\n#clusters <- hclust(dist(UserView))\n\n#UserView_mean = rowMeans(UserView)\n\n\ndata.table.full[ , svd_cluster:= clusters$cluster[ as.integer(user_id_id) ] ]\n\n\nnnzero(sparce_UserMeadia)\n\n\n\n\ndata.table.full = smoothed_mean_per_group(data.table.full, \"is_listened\", list(c(\"user_id\", \"media_id\"), c(\"user_id\", \"artist_id\"), c(\"user_id\", \"genre_id\"), c(\"artist_id\", \"album_id\"), c(\"artist_id\", \"age_group\")), 10)\n#data.table.full = smoothed_mean_per_group_by_pos(data.table.full, \"is_listened\", list(c(\"user_id\", \"media_id\"), c(\"user_id\", \"artist_id\"), c(\"user_id\", \"genre_id\"), c(\"artist_id\", \"album_id\"), c(\"artist_id\", \"age_group\")), 10)\n\n\ndata.table.full = smoothed_mean_per_group(data.table.full, \"is_listened\", list(c(\"user_id\", \"svd_cluster\"), c(\"user_id\", \"artist_id\", \"svd_cluster\"), c(\"user_id\", \"genre_id\", \"svd_cluster\"), c(\"artist_id\", \"album_id\", \"svd_cluster\"), c(\"artist_id\", \"age_group\", \"svd_cluster\")), 10)\ndata.table.full = smoothed_mean_per_group_by_pos(data.table.full, \"is_listened\", list(c(\"user_id\", \"media_id\", \"svd_cluster\"), c(\"user_id\", \"artist_id\", \"svd_cluster\"), c(\"user_id\", \"genre_id\", \"svd_cluster\"), c(\"artist_id\", \"album_id\", \"svd_cluster\"), c(\"artist_id\", \"age_group\", \"svd_cluster\")), 10)\n\ndata.table.full$user_id-id=NULL\ndata.table.full$media_id_id=NULL\n\n\n\n\n#######################################################################################CosSimilarityine########################################################################################\n\ndata.table.full_NAto0 =data.table.full[!(is.na(is_listened))]\n\ndata.table.full_NAto0$user_id_id = as.numeric(as.factor(data.table.full_NAto0$user_id))\ndata.table.full_NAto0$media_id_id = as.numeric(as.factor(data.table.full_NAto0$media_id))\n\n#data.table.full$user_id_id = as.numeric(as.factor(data.table.full$user_id))\n#data.table.full$media_id_id = as.numeric(as.factor(data.table.full$media_id))\n\n\ndata.table.full_NAto0[!(is.na(is_listened)), total_listens_per_user := .N, by=.(is_listened, user_id)]\ndata.table.full_NAto0[is_listened==0, total_listens_per_user:=0]\n#data.table.full_NAto0[is.na(is_listened), total_listens_per_user:=0]\ndata.table.full_NAto0[, total_listens_per_user := max(total_listens_per_user), by=.(user_id)]\ndata.table.full_NAto0[total_listens_per_user>0, islisten_rel_to_total := is_listened/total_listens_per_user, by=.(user_id)]\ndata.table.full_NAto0[total_listens_per_user==0, islisten_rel_to_total := 0]\ndata.table.full_NAto0$total_listens_per_user=NULL\n\n\nsparce_UserMeadia2 <- sparseMatrix(i = data.table.full_NAto0$user_id_id,\n                                   j = data.table.full_NAto0$media_id_id,\n                                   x = data.table.full_NAto0$islisten_rel_to_total)\n\n\n#sparce_UserMeadia2_matrix = Matrix(sparce_UserMeadia2, sparse = FALSE)\n#sparce_UserMeadia2 = t(sparce_UserMeadia2)\n#clusters_cos = norm.sim.ksc(as.matrix(sparce_UserMeadia2), 10)\n#sc <- specc(sparce_UserMeadia2, centers=10)\n#library(skmeans)\n#clust_sk <- skmeans(sparce_UserMeadia2, 20, method='pclust', control=list(verbose=TRUE))\n\ncosine = cosSparse(t(sparce_UserMeadia2))\n## run affinity propagation\napres <- apcluster(cosine, details=TRUE)\n\n#wss <- sapply(8:20,function(k){kmeans(cosine, k, nstart=10,iter.max = 15 )$tot.withinss})\n\nclusters = kmeans(cosine, 20, nstart = 20)\n\n\n#cosine_m = as.matrix(cosine)\n#cosine_subsample =  as.data.frame(cosine[1:100, 1:100])\n#corrplot(corr  = as.matrix(cosine_subsample), method=\"circle\", is.corr = FALSE)\n\n#hc <- hclust.vector(cosine, method=\"single\", metric='euclidean') \n\n\n\n##################################################################################################################################################################################\n\n\n\n\ndata.table.full = moments_per_group_on_real_corelated_var(data.table.full, \"ts_listen\", list(c(\"user_id\", \"media_id\"), c(\"user_id\", \"genre_id\", \"media_id\"), c(\"user_id\", \"age_group\", \"media_id\"), c(\"user_id\", \"svd_cluster\") ))\n\n\n###########################################\n## feture treatment with vtreat ###\n\n\n#fwrite(data.table.full, \"data.table.full.csv\")\n#data.test$is_listened=data_test_labels\n#fwrite(data.test, \"datatest.csv\")\n\ndata.table.full =fread(\"data.table.full.csv\", sep = \",\", dec = \".\", header = TRUE)\ndata.test = fread(\"datatest.csv\", sep = \",\", dec = \".\", header = TRUE)\ndata_test_labels = data.test$is_listened\ndata.test$is_listened=NULL\n\ndataset= data.table.full$dataset\nlabel = data.table.full$is_listened\ndframe_treat = vtreat_vars(data.table.full[,-\"is_listened\"])\n\ndata.table.full=NULL\n\n#dframe_treat$dataset=dataset\n#dframe_treat$is_listened=NULL\ndframe_treat$is_listened=label\n\n\n\n###########################################\n\n\n\n\n#dframe_treat = moments_per_group_on_real_corelated_var(dframe_treat, \"ts_listen_clean\", list(c(\"user_id_clean\", \"media_id_clean\"), c(\"user_id\", \"media_id\"), c(\"user_id\", \"media_id\") ))\n\ndframe_treat$age\n\n\n\n##############################################\n#                                            #\n#        XGBOOST WITH GIVEN PARAMETERS       #\n#                                            #\n##############################################\n\n\nset.seed(10)\n# configure multicore\nlibrary(doMC)\nregisterDoMC(cores=4)\n\ndtrain_custsearch = dframe_treat %>% filter(dataset_lev_x.train==1) #train\ndtest_custsearch = dframe_treat %>% filter(dataset_lev_x.train==0) #test\ndframe_treat=NULL\n\ndtrain_custsearch$dataset_lev_x.train=NULL\ndtrain_custsearch$sample_id_clean=NULL\ndtest_custsearch$dataset_lev_x.train=NULL\ndtest_custsearch$is_listened=NULL\n\nntrees <- 500 \n\n#subset for now      \ndtrain_custsearch_subset = dtrain_custsearch[sample.int(n = nrow(dtrain_custsearch), size = floor(.01*nrow(dtrain_custsearch)), replace = F), ]\nindx_test = sample.int(n = nrow(dtest_custsearch), size = floor(.1*nrow(dtest_custsearch)), replace = F)\ndtest_custsearch_subset = dtest_custsearch[indx_test, ]\nlabel_test = data_test_labels[indx_test]\n\ndata_split=split_dataset(dtrain_custsearch_subset, .7)\ndtrain = data_split$train\ndvalid = dtest_custsearch_subset\n\nscale_pos_weight = dim(dtrain[dtrain$is_listened==0,])[1]/dim(dtrain[dtrain$is_listened==1,])[1]\n\ndtrain$is_listened=NULL\ndvalid$is_listened=NULL\n\n#dtrain <- sparse.model.matrix(is_listened ~ ., data = dtrain)\n#dvalid <- sparse.model.matrix(is_listened ~ ., data = dvalid)\n\ndtrain <- xgb.DMatrix(data = as.matrix(dtrain), label=data_split$train$is_listened)\ndvalid <- xgb.DMatrix(data = as.matrix(dvalid), label=label_test)\n\n\nwatchlist <- list(train=dtrain, test=dvalid)\n\n\n\nparam <- list(booster=\"gbtree\", \n              objective=\"binary:logistic\", \n              #eval_metric=\"mlogloss\",\n              eval_metric=\"error\",\n              eval_metric=\"rmse\", \n              eval_metric=\"auc\",\n              nthread=13,\n              #num_class=2,\n              eta = .02,\n              #gamma = 1,\n              max_depth = 100,\n              #min_child_weight = 1,\n              subsample = 1,\n              scale_pos_weight=scale_pos_weight,\n              \n              colsample_bytree = 1\n)\n\nxgb2 <- xgb.train(data = dtrain,\n                  params = param,\n                  watchlist=watchlist,\n                  # nrounds = xgb2cv$best_ntreelimit\n                  nrounds = 500\n)\n\n\npred = predict(xgb2, as.matrix(dtest_custsearch))\nprediction <- as.numeric(pred > 0.5)\nerror = mean( as.numeric(prediction != data_test_labels))\n\nimportance <- xgb.importance(feature_names = names(dtrain_custsearch_subset), model = xgb2)\nhead(importance)\n\n\nxgb.plot.importance(importance_matrix = importance)\ncor(dtrain_custsearch_subset$user_artist_ranking_clean, dtrain_custsearch_subset$is_listened)\n\n\n\n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  ######  \n\n\n\n\n\n\n\n\n",
    "created" : 1506364257095.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3861262160",
    "id" : "9E0EAF6F",
    "lastKnownWriteTime" : 1506363069,
    "last_content_update" : 1506363069,
    "path" : "~/Documents/HU_Berlin/ML/R train/online_stage/online_clean_clean.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}