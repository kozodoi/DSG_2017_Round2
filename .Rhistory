###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111")           {setwd("~/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")             {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "nataliasverchkova")   {setwd("~/Documents/DSG/DSG_2017_Finals/")}
if (Sys.info()[8] == "oleksiyostapenko")    {setwd("/Users/oleksiyostapenko/Documents/HU_Berlin/ML/DSG/DSG_2017_Finals")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
source(file.path(code.folder, "code_0_parameters.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading data and creating IDs
train_data_full =  read.csv(file.path(data.folder, "train.csv"), sep = ",", dec = ".", header = TRUE)
train_data_full$id = seq(1,nrow(train_data_full))
# converting features
train_data_full[num_vars] <- lapply(train_data_full[num_vars], function(x) as.numeric(as.character(x)))
train_data_full[fac_vars] <- lapply(train_data_full[fac_vars], function(x) factor(x))
#train_data_full[dat_vars] <- lapply(train_data_full[dat_vars], function(x) as.Date(x, origin = '1971-01-01'))
# random data partitioning
idx = caret::createDataPartition(train_data_full$id, p = 0.8, list = FALSE)
train_data_full[idx, "part"] = "train"
train_data_full[-idx,"part"] = "valid"
# saving data as .RDA
save(train_data_full, file = file.path(data.folder, "data_partitioned.rda"))
################################################################################################
#
#  Function creates new features: moments of a target variable across different factor levels
#   - data = data set as data.frame or data.table
#   - target = name of the target variable (numeric)
#   - factors = list of factor names (or set all_factors = T)
#   - stats = list of staistics (min, max, mean, median, size or set all_stats = T)
#   - smooth = smoothing parameter according to Daria Soboleva (0 = no smoothing)
#
################################################################################################
# introducing the function
add_factor_features <- function(train, valid, target, factors = NULL, stats = NULL, all_factors = F, all_stats = F, smooth = 10) {
##### PREPARATIONS
# saving colnames
initial.vars <- colnames(train)
# checking if target is factor
if (class(train[[target]]) == "factor") {
train[[target]] <- as.numeric(train[[target]])-1
}
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, train))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table)
# converting to train table
train <- as.data.table(train)
##### ERRORS
# checking if target is a numeric variable
if (!class(train[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, train))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(train[[target]],   na.rm = T)
global_median <- median(train[[target]], na.rm = T)
global_min    <- min(train[[target]],    na.rm = T)
global_max    <- max(train[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
# saving colnames
current.vars  <- colnames(train)
current.stats <- current.vars[!current.vars %in% initial.vars]
# converting to data.frame
train <- as.data.frame(train)
valid <- as.data.frame(valid)
# merging stats with validation
valid <- merge(valid, train[, c(factors, current.stats)], by = factors, all.x = T, all.y = F, sort = F)
##### RETURNING THE DATA SET
return(list(train = train, valid = valid))
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111")           {setwd("~/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")             {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "nataliasverchkova")   {setwd("~/Documents/DSG/DSG_2017_Finals/")}
if (Sys.info()[8] == "oleksiyostapenko")    {setwd("/Users/oleksiyostapenko/Documents/HU_Berlin/ML/DSG/DSG_2017_Finals")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
source(file.path(code.folder, "code_0_parameters.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading the data
load(file.path(data.folder, "data_partitioned.rda"))
#   CODES FOR NEW FEATURES
#
#
#
#   CODES FOR NEW FEATURES
#
#
#
#
#   CODES FOR NEW FEATURES
# partitioning
train <- train_data_full[train_data_full$part == "train", ]
valid <- train_data_full[train_data_full$part == "valid", ]
# adding factor features (Nikita)
data <- add_factor_features(train, valid, target = dv, stats = c("Mean", "Min", "Max", "Size"), smooth = 10)
data <- add_factor_features(train, valid, target = dv, smooth = 10)
