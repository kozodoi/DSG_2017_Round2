if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
target = "price"
all_factors = T
all_stats = T
smooth = 10
##### PREPARATIONS
# saving colnames
initial.vars <- colnames(train)
# checking if target is factor
if (class(train[[target]]) == "factor") {
train[[target]] <- as.numeric(train[[target]])-1
}
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, train))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(train.table)
# converting to train table
train <- as.data.table(train)
##### ERRORS
# checking if target is a numeric variable
if (!class(train[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, train))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(train[[target]],   na.rm = T)
global_median <- median(train[[target]], na.rm = T)
global_min    <- min(train[[target]],    na.rm = T)
global_max    <- max(train[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
initial.vars
current.vars <- colnames(train)
current.vars
current.vars %in% initial.vars
current.vars[current.vars %in% initial.vars]
current.vars[!current.vars %in% initial.vars]
current.stats <- current.vars[current.vars %in% initial.vars]
head(vali)
head(valid)
valid <- merge(valid, train[, c(target, current.stats)], by = target, all.x = T, all.y = F, sort = F)
head(valid)
head(train[, c(target, current.stats)])
factors
valid <- merge(valid, train[, c(factors, current.stats)], by = factors, all.x = T, all.y = F, sort = F)
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
##### PREPARATIONS
# saving colnames
initial.vars <- colnames(train)
# checking if target is factor
if (class(train[[target]]) == "factor") {
train[[target]] <- as.numeric(train[[target]])-1
}
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, train))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(train.table)
# converting to train table
train <- as.data.table(train)
##### ERRORS
# checking if target is a numeric variable
if (!class(train[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, train))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(train[[target]],   na.rm = T)
global_median <- median(train[[target]], na.rm = T)
global_min    <- min(train[[target]],    na.rm = T)
global_max    <- max(train[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
# saving colnames
current.vars <- colnames(train)
current.stats <- current.vars[current.vars %in% initial.vars]
head(valid)
head(train[, c(factors, current.stats)])
valid <- merge(valid, train[, c(factors, current.stats)], by = factors, all.x = T, all.y = F, sort = F)
factors
current.stats
current.vars
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
initial.vars <- colnames(train)
initial.vars
# checking if target is factor
if (class(train[[target]]) == "factor") {
train[[target]] <- as.numeric(train[[target]])-1
}
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, train))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(train.table)
# converting to train table
train <- as.data.table(train)
##### ERRORS
# checking if target is a numeric variable
if (!class(train[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, train))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(train[[target]],   na.rm = T)
global_median <- median(train[[target]], na.rm = T)
global_min    <- min(train[[target]],    na.rm = T)
global_max    <- max(train[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
train[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
current.vars <- colnames(train)
initial.vars
current.vars
current.stats <- current.vars[current.vars %in% initial.vars]
current.stats
current.stats <- current.vars[!current.vars %in% initial.vars]
current.stats
valid <- merge(valid, train[, c(factors, current.stats)], by = factors, all.x = T, all.y = F, sort = F)
factors
head(train[, c(factors, current.stats)])
current.stats
train[, c(factors, current.stats)]
# converting to data.frame
train <- as.data.frame(train)
valid <- as.data.frame(valid)
current.stats
train[, c(factors, current.stats)]
head( train[, c(factors, current.stats)])
valid <- merge(valid, train[, c(factors, current.stats)], by = factors, all.x = T, all.y = F, sort = F)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
# adding factor features
data <- add_factor_features(train, valid, target = "price", all_factors = T, all_stats = T, smooth = 10)
train <- data$train
valid <- data$valid
# submiting simple predictions
prediction <- rep(0, nrow(valid))
submit(prediction, data = valid, target.var = "target", id.var = "zip", folder = subm.folder, file = "test.csv")
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
data("titanic")
data("Titanic")
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Titanic")
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
# adding factor features
data <- add_factor_features(train, valid, target = "price", all_factors = T, all_stats = T, smooth = 10)
train <- data$train
valid <- data$valid
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
# adding factor features
data <- add_factor_features(train, valid, target = "price", all_factors = T, all_stats = T, smooth = 10)
train <- data$train
valid <- data$valid
# submiting simple predictions
prediction <- rep(0, nrow(valid))
submit(prediction, data = valid, target.var = "target", id.var = "zip", folder = subm.folder, file = "test.csv")
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "oleksiyostapenko"){setwd("/Users/oleksiyostapenko/Documents/HU_Berlin/ML/DSG/DSG_2017_Finals")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, titanic, vtreat)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
train <- Sacramento[1:700,]
valid <- Sacramento[701:932,]
# scaling numeric features
data <- scale_data(train, valid, type = "minmax", except = "beds")
train <- data$train
valid <- data$valid
# adding factor features
data <- add_factor_features(train, valid, target = "price", all_factors = T, all_stats = T, smooth = 10)
train <- data$train
valid <- data$valid
# submiting simple predictions
prediction <- rep(0, nrow(valid))
submit(prediction, data = valid, target.var = "target", id.var = "zip", folder = subm.folder, file = "test.csv")
