50+3*9.99+9*19.99
50+3*9.99+6*19.99+15*29.99
50+3*9.99+6*19.99+2*29.99
3*9.99+9*19.99
3*10 + 9+15
3*10 + 9*15
50 + 3*10 + 6*15 +3*30
30*12
0.7*(-95) + 0.3*265
0.8*(-95) + 0.2*265
799 + 7.99*24
(799 + 7.99*24) / 24
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# adding factor features
data <- add_factor_features(data = Sacramento, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
pred <- 1:nrow(data)
real <- data$price
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
auc(actual, prediction)
prediction = pred
auc(actual, prediction)
actual = data$price
auc(actual, prediction)
prediction
actual
actual <- as.factor(actual)
auc(actual, prediction)
actual
actual <- (data$price>0)
auc(actual, prediction)
auc(c(1,1,1,0,0,0), c(0.9,0.8,0.4,0.5,0.3,0.2))
sapply(class(data))
sapply(data, class)
sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")]
except = "beds"
numeric.vars <- sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")]
numeric.vars
numeric.vars[!(numeric.vars %in% except)]
except
numeric.vars
numeric.vars <- names(sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")])
numeric.vars
numeric.vars[!(numeric.vars %in% except)]
numeric.vars <- numeric.vars[!(numeric.vars %in% except)]
numeric.vars
var
numeric.vars
############################################################
#
#  Function scales all numeric features in the data set
#   - data = data set as data.frame or data.table
#   - scaling = scaling type (z or minmax)
#   - except = variable names which should not be scaled
#
############################################################
# introducing the function
scale_data <- function(data, scaling = c("minmax", "z"), except = NA) {
# finding all numeric features
numeric.vars <- names(sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")])
# removing features that should not be scaled
numeric.vars <- numeric.vars[!(numeric.vars %in% except)]
# looping through features
for (var in numeric.vars) {
# calculating moments
mean <- mean(data[[var]])
sd   <- sd(data[[var]])
min  <- min(data[[var]])
max  <- max(data[[var]])
# applying scaling method
if (scaling == "z")      {data[[var]] <- (data[[var]] - mean) / sd}
if (scaling == "minmax") {data[[var]] <- (data[[var]] - min) / (max - min)}
}
# returning the data set
return(data)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# adding factor features
data <- add_factor_features(data = Sacramento, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
data <- scale_data(data = Sacramento, type = "minmax", except = "price")
############################################################
#
#  Function scales all numeric features in the data set
#   - data = data set as data.frame or data.table
#   - type = scaling type (z or minmax)
#   - except = variable names which should not be scaled
#
############################################################
# introducing the function
scale_data <- function(data, type = c("minmax", "z"), except = NA) {
# finding all numeric features
numeric.vars <- names(sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")])
# removing features that should not be scaled
numeric.vars <- numeric.vars[!(numeric.vars %in% except)]
# looping through features
for (var in numeric.vars) {
# calculating moments
mean <- mean(data[[var]])
sd   <- sd(data[[var]])
min  <- min(data[[var]])
max  <- max(data[[var]])
# applying scaling method
if (scaling == "z")      {data[[var]] <- (data[[var]] - mean) / sd}
if (scaling == "minmax") {data[[var]] <- (data[[var]] - min) / (max - min)}
}
# returning the data set
return(data)
}
############################################################
#
#  Function scales all numeric features in the data set
#   - data = data set as data.frame or data.table
#   - type = scaling type (z or minmax)
#   - except = variable names which should not be scaled
#
############################################################
# introducing the function
scale_data <- function(data, type = c("minmax", "z"), except = NA) {
# finding all numeric features
numeric.vars <- names(sapply(data, class)[sapply(data, class) %in% c("numeric", "integer")])
# removing features that should not be scaled
numeric.vars <- numeric.vars[!(numeric.vars %in% except)]
# looping through features
for (var in numeric.vars) {
# calculating moments
mean <- mean(data[[var]])
sd   <- sd(data[[var]])
min  <- min(data[[var]])
max  <- max(data[[var]])
# applying scaling method
if (type == "z")      {data[[var]] <- (data[[var]] - mean) / sd}
if (type == "minmax") {data[[var]] <- (data[[var]] - min) / (max - min)}
}
# returning the data set
return(data)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# scaling numeric features
data <- scale_data(data = Sacramento, type = "minmax", except = "price")
summary(data)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# scaling numeric features
data <- scale_data(data = Sacramento, type = "minmax", except = "beds")
summary(data)
# adding factor features
data <- add_factor_features(data = Sacramento, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# scaling numeric features
data <- scale_data(data = Sacramento, type = "minmax", except = "beds")
summary(data)
# adding factor features
data <- add_factor_features(data = data, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
################################################################################################
#
#  Function creates new features: moments of a target variable across different factor levels
#   - data = data set as data.frame or data.table
#   - target = name of the target variable (numeric)
#   - factors = list of factor names (or set all_factors = T)
#   - stats = list of staistics (min, max, mean, median, size or set all_stats = T)
#   - smooth = smoothing parameter according to Daria Soboleva (0 = no smoothing)
#
################################################################################################
# introducing the function
add_factor_features <- function(data, target, factors, stats, all_factors = F, all_stats = F, smooth = 10) {
##### PREPARATIONS
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, data))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# checking if target is factor
if (class(data[[target]]) == "factor") {
data[[target]] <- as.numeric(data[[target]])-1
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table)
# converting to data table
data <- as.data.table(data)
##### ERRORS
# checking if target is a numeric variable
if (!class(data[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, data))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(data[[target]],   na.rm = T)
global_median <- median(data[[target]], na.rm = T)
global_min    <- min(data[[target]],    na.rm = T)
global_max    <- max(data[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
##### RETURNING THE DATA SET
return(data)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting directory depending on a user
if (Sys.info()[8] == "lizzzi111") {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")   {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "")          {setwd("")}
if (Sys.info()[8] == "")          {setwd("")}
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, ggplot2, caret, Metrics, xgboost)
# loading all functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PREPARATION        #
#                                 #
###################################
# loading exapmle data set
data("Sacramento")
summary(Sacramento)
# scaling numeric features
data <- scale_data(data = Sacramento, type = "minmax", except = "beds")
summary(data)
data$price <- as.factor(data$price>mean(data$price))
data$price
summary(data)
data <- add_factor_features(data = data, target = "price", all_factors = T, all_stats = T, smooth = 10)
################################################################################################
#
#  Function creates new features: moments of a target variable across different factor levels
#   - data = data set as data.frame or data.table
#   - target = name of the target variable (numeric)
#   - factors = list of factor names (or set all_factors = T)
#   - stats = list of staistics (min, max, mean, median, size or set all_stats = T)
#   - smooth = smoothing parameter according to Daria Soboleva (0 = no smoothing)
#
################################################################################################
# introducing the function
add_factor_features <- function(data, target, factors, stats, all_factors = F, all_stats = F, smooth = 10) {
##### PREPARATIONS
# checking if target is factor
if (class(data[[target]]) == "factor") {
data[[target]] <- as.numeric(data[[target]])-1
}
# selecting factors if not sepcified
if (all_factors == T) {
factors <- names(Filter(is.factor, data))
}
# selecting stats if not sepcified
if (all_stats == T) {
stats <- c("min", "max", "mean", "median", "size")
}
# loading libraries
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(data.table)
# converting to data table
data <- as.data.table(data)
##### ERRORS
# checking if target is a numeric variable
if (!class(data[[target]]) %in% c("numeric", "integer")) {
stop("Target variable is not numeric")
}
# checking if factors are indeed factors
if (sum(factors %in% names(Filter(is.factor, data))) < length(factors)) {
stop("Not all factors are factor variables")
}
##### COMPUTING AGGREGATED STATISTICS
global_mean   <- mean(data[[target]],   na.rm = T)
global_median <- median(data[[target]], na.rm = T)
global_min    <- min(data[[target]],    na.rm = T)
global_max    <- max(data[[target]],    na.rm = T)
##### COMPUTING FACTOR-LEVEL STATISTICS
for (variable in factors) {
for (stat in stats) {
# computing statistics: min
if (stat == "min") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (min(get(target), na.rm = T)*.N  + global_min*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: max
if (stat == "max") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (max(get(target), na.rm = T)*.N + global_max*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: mean
if (stat == "mean") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (mean(get(target), na.rm = T)*.N + global_mean*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: median
if (stat == "median") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := (median(get(target), na.rm = T)*.N + global_median*smooth)/(.N + smooth), by = get(variable)]
}
# computing statistics: size
if (stat == "size") {
var_name <- paste0(target, "_", variable, "_", stat)
data[, (var_name) := as.numeric(.N), by = get(variable)]
}
}
}
##### RETURNING THE DATA SET
return(data)
}
summary(data)
data <- add_factor_features(data = data, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
data <- scale_data(data = Sacramento, type = "minmax", except = "beds")
summary(data)
data <- add_factor_features(data = data, target = "price", all_factors = T, all_stats = T, smooth = 10)
summary(data)
data <- scale_data(data = data, type = "minmax", except = "beds")
summary(data)
data <- data("Sacramento")
