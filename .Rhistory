quantity = c(1,1,2,1,-1),
product_id = 1:5)
mark.position.portion <- function(purchases) {
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=as.character(price_n / price_gr)]
purchases[quantity>=0, .(price, ordernumber, quantity, product_id, price.portion)]
}
purchases <- sample.purchases
mark.position.portion(sample.purchases)
sprintf("%.3f", round(5.2,3))
mark.position.portion <- function(purchases) {
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2)]
purchases[quantity>=0, .(price, ordernumber, quantity, product_id, price.portion)]
}
mark.position.portion <- function(purchases) {
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))]
purchases[quantity>=0, .(price, ordernumber, quantity, product_id, price.portion)]
}
mark.position.portion(sample.purchases)
purchases <- data.table(
product_id=c(268, 1232, 218, 1529, 1728, 1424),
price=c(29845571.65, 10724198.77, 679267.85, 437868.43, 2549627.79, 16513343.11),
quantity=c(1, 1, 1, 1, 1, 1),
ordernumber=c(4, 157, 273, 273, 340, 377))
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))]
View(purchases)
purchases[quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
purchases <- data.table(
"product_id"=c(1433, 1561, 249, 682, 1317, 75),
"price"=c(134364856.95, 37913742.02, 1109099776.77, 68800300.24, 35660284, 365317.53),
"quantity"=c(1, 1, 1, 1, 1, 2),
"ordernumber"=c(232, 232, 570, 570, 570, 635))
mark.position.portion <- function(purchases) {
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))]
purchases[quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
}
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))]
View(purchases)
purchases[quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
purchases <- data.table(
"product_id"=c(1433, 1561, 249, 682, 1317, 75),
"price"=c(134364856.95, 37913742.02, 1109099776.77, 68800300.24, 35660284, 365317.53),
"quantity"=c(1, 1, 1, 1, 1, 2),
"ordernumber"=c(232, 232, 570, 570, 570, 635))
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))][quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550))
purchases[quantity>=0, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))][quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
mark.position.portion <- function(purchases) {
purchases[quantity>=0]
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))][quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
}
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550)
purchases[quantity>=0]
purchases[quantity>=0]
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550)
View(purchases)
View(purchases)
rm(purchases)
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550)
purchases[quantity>=0]
purchases[quantity>=0]
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550)
)
purchases[quantity>=0]
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))][quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
rm(purchases)
purchases <- purchases[quantity>=0]
purchases <- data.table(
"product_id"=c(1538, 1610, 1038, 1627, 1197, 1588),
"price"=c(1552714.06, 26985691.34, 24403584.72, 9634794.26, 12959576.45, 7591754.01),
"quantity"=c(2, 1, 4, 3, 1, 1),
"ordernumber"=c(259, 259, 262, 262, 446, 550))
purchases <- purchases[quantity>=0]
purchases[, price_n := price*quantity][,price_gr:=sum(price_n), by = ordernumber][,price.portion:=sprintf("%.2f", round(price_n / price_gr*100,2))][quantity>=0, .(product_id, price,  quantity,ordernumber , price.portion)]
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test_data_01.csv",
stringsAsFactors = FALSE)
View(test_data)
apply(test_data, as.numeric)
apply(test_data,2, as.numeric)
apply(apply(test_data,2, as.numeric), 2, function(x) sum(is.na(x))==nrows(test_data))
nrows(test_data)
.rows(test_data)
apply(apply(test_data,2, as.numeric), 2, function(x) sum(is.na(x))==nrow(test_data))
ind <- apply(apply(test_data,2, as.numeric), 2, function(x) sum(is.na(x))==nrow(test_data))
test_data[,ind] <- apply(test_data[,ind],2, function(col) as.numeric(gsub(" ", "", col)) )
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test_data_01.csv",
stringsAsFactors = FALSE)
ind <- apply(apply(test_data,2, as.numeric), 2, function(x) sum(is.na(x))==nrow(test_data))
test_data[,!ind] <- apply(test_data[,ind],2, function(col) as.numeric(gsub(" ", "", col)) )
ind <- apply(apply(test_data,2, as.numeric), 2, function(x) sum(is.na(x))!=nrow(test_data))
ind
test_data[,ind] <- apply(test_data[,ind],2, function(col) as.numeric(gsub(" ", "", col)) )
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test_data_01.csv",
stringsAsFactors = FALSE)
d <- test_data
fix_data <- function(d){
ind <- apply(apply(d,2, as.numeric), 2, function(x) sum(is.na(x))!=nrow(d))
d[,ind] <- apply(d[,ind],2, function(col) as.numeric(gsub(" ", "", col)) )
return(d)
}
l<- fix_data(d)
View(l)
test_data <- as.data.frame(list(V1 = c("-1. 176", "0.67 7", "0. 9575", "-1.844 8", "1.97 3"), V2 = c("0. 118", "-0.27 78", "0.9945", "-0.8619", "-0.3495"), V3 = c("- 1.2977", "2.2 253", "0.16 81", "2.003 1", "- 0.2771"), V4 = c("1. 1062", "0. 5428", "-1.4989", "-0.0758", "0. 2142"), V5 = c("ST 123E", "II 2", "ST 123E", "ST 123E", "HP 129")))
d <- test_data
View(d)
ind <- apply(apply(d,2, as.numeric), 2, function(x) sum(is.na(x))!=nrow(d))
apply(d,2, as.numeric)
View(d)
nd <- apply(d,2, function(col) as.numeric(gsub(" ", "", col)) )
nd
ind_f <- apply(nd, !is.numeric)
ind_f <- apply(nd,2, !is.numeric)
ind_f <- apply(nd,2, !(is.numeric))
ind_f <- apply(nd,2, function(var) !(is.numeric(var)))
ind_f
View(nd)
ind_f <- apply(nd,2, function(var) (is.character(var)))
ind_f
typeof(nd)
nd <- as.data.frame(apply(d,2, function(col) as.numeric(gsub(" ", "", col))))
ind_f <- apply(nd,2, function(var) sum(is.na(x))==nrow(d))
ind_f <- apply(nd,2, function(x) sum(is.na(x))==nrow(d))
ind_f
nd[ind_f] <- d[ind_f]
return(nd)
View(nd)
data(swiss)
swiss
x <- swiss
x[,2:]
x[,2:]
x[,c(2:)]
x[,2-]
x
x[,2]
x[,2:]
x[,2-]
x[,-1]
p_values <- sapply(x[,-1], function(df) shapiro.test(df)$p.value)
p_values
ind_n <- p_values<.05
length(ind_n)
length(ind_n==T)
x[,-1]%in%x[,ind_n]
names(x)[x[,-1]%in%x[,ind_n]]
smart_lm <- function(x){
p_values <- sapply(x[,-1], function(df) shapiro.test(df)$p.value)
ind_n <- p_values<.05
vec <- names(x)[x[,-1]%in%x[,ind_n]]
if(length(vec)>0){
return(vec)
}else{
return("There are no normal variables in the data")
}
}
data(swiss)
smart_lm(swiss)
p_values
4.978056e-01
ind_n <- p_values>.05
ind_n
vec
vec <- names(x)[x[,-1]%in%x[,ind_n]]
vec <- names(x)[x[,-1]%in%x[,ind_n]]
vec
p_values <- sapply(x[,-1], function(df) shapiro.test(df)$p.value)
ind_n <- p_values>.05
vec <- names(x)[x[,-1]%in%x[,ind_n]]
vec
vec <- names(x[,-1])[x[,-1]%in%x[,ind_n]]
vec
ind_n
vec
names(x[,-1])
vec <- names(x[,-1])[,ind_n]
vec <- names(x[,-1])[ind_n]
vec
lm(x[,-1]~., data=cbind(x[,-1], x[,vec]))
lm(x[,1]~., data=cbind(x[,1], x[,vec]))
lm(x[,1]~., data= x[,vec])
fit <- lm(x[,1]~., data= x[,vec])$
fit <- lm(x[,1]~., data= x[,vec])
lm(x[,1]~., data= x[,vec])
fit <- lm(x[,1]~., data= x[,vec])
fit$coefficients
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm <- function(x){
p_values <- sapply(x[,-1], function(df) shapiro.test(df)$p.value)
ind_n <- p_values>.05
vec <- names(x[,-1])[ind_n]
if(length(vec)>0){
fit <- lm(x[,1]~., data= x[,vec])
return(fit$coefficients)
}else{
return("There are no normal variables in the data")
}
}
smart_lm(test_data)
test_data <- as.data.frame(list(V1 = c(0.4, 0.8, 4, 0.4, 3.1, 0.3, 0.5, 1.2, 1.8, 0.3, 0.3, 0, 0.5, 0.1, 0.3, 1.1, 0.8, 0.2, 2.4, 0.2, 1.5, 1.4, 0.2, 2.9, 0, 2.8, 5.4, 0.8, 1.2, 0.5), V2 = c(0.1, 0.4, 1, 4.2, 2.1, 1.3, 0.1, 0.2, 0.9, 0.3, 0.7, 2.1, 2.1, 0, 0.8, 0.1, 0.3, 0.3, 0.1, 0, 0, 1.2, 0.7, 0.2, 1.4, 3.2, 0, 0.2, 1.4, 0.1)))
smart_lm(test_data)
shapiro.test(test_data$V2)
smart_lm <- function(x){
if(ncol(x)>2){
p_values <- sapply(x[,-1], function(df) shapiro.test(df)$p.value)
} else {
p_values <- shapiro.test(x[,2])$p.value
}
ind_n <- p_values>.05
vec <- names(x[,-1])[ind_n]
if(length(vec)>0){
fit <- lm(x[,1]~., data= x[,vec])
return(fit$coefficients)
}else{
return("There are no normal variables in the data")
}
}
smart_lm(test_data)
sum(1:4)
library("foreach", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
c('a','b','c') %nin% c('a','b')
require(mlbench)
install.packages("mlbench")
require(mlbench)
require(mxnet)
data(Sonar, package="mlbench")
Sonar[,61] = as.numeric(Sonar[,61])-1
View(Sonar)
train.ind = c(1:50, 100:150)
train.x = data.matrix(Sonar[train.ind, 1:60])
train.y = Sonar[train.ind, 61]
test.x = data.matrix(Sonar[-train.ind, 1:60])
test.y = Sonar[-train.ind, 61]
N <- c(45, 23,	55,	32,	51,	91,	74,	53,	70,	84)
Z <- c(64,	75,	95,	56,	44,	130,	106,	80,	87,	115)
N$Group <- "N"
colnames(N)[1] <- "Gewicht"
Z <- as.data.frame(Z)
Z$Group <- "Z"
colnames(Z)[1] <- "Gewicht"
N <- c(45, 23,	55,	32,	51,	91,	74,	53,	70,	84)
Z <- c(64,	75,	95,	56,	44,	130,	106,	80,	87,	115)
N <- as.data.frame(N)
N$Group <- "N"
colnames(N)[1] <- "Gewicht"
Z <- as.data.frame(Z)
Z$Group <- "Z"
colnames(Z)[1] <- "Gewicht"
t.test(N$Gewicht,Z$Gewicht, var.equal = T)
coins <- read.csv("/Users/lizzzi111/Documents/Master/SoSe17/Pattern Rec/Geiwcht_muenzen.csv")
View(coins)
coins <- read.csv2("/Users/lizzzi111/Documents/Master/SoSe17/Pattern Rec/Geiwcht_muenzen.csv")
View(coins)
tapply(coins$G, coins$K, summary)
tapply(coins$G, coins$K, var)
tapply(coins$G, coins$K, sd)
leveneTest(G~K, coins)
library(Rcmdr)
leveneTest(G~K, coins)
coins$K <- factor(coins$K)
tapply(coins$G, coins$K, sd)
tapply(coins$G, coins$K, var)
leveneTest(G~K, coins)
##12
N <- c(45, 23,	55,	32,	51,	91,	74,	53,	70,	84)
Z <- c(64,	75,	95,	56,	44,	130,	106,	80,	87,	115)
mean(Z)
shapiro.test(Z)
library(Rcmdr)
leveneTest(N,Z)
N <- as.data.frame(N)
N$Group <- "N"
colnames(N)[1] <- "Gewicht"
Z <- as.data.frame(Z)
Z$Group <- "Z"
colnames(Z)[1] <- "Gewicht"
all <- rbind(N,Z)
all$Group <- factor(all$Group)
all$Gewicht <- as.numeric(all$Gewicht)
leveneTest(Gewicht~Group, all)
leveneTest(G~K, coins)
tapply(coins$G, coins$K, sum)
table(coins$K, coins$G)
table(coins$K)
2.042+2.021
(2.042+2.021)/2
data <- read.csv("/Users/lizzzi111/Desktop/DSG_2017/data/data_flow.csv")
require(data.table)
data <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/data_flow.csv")
radio <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt")
alb <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt")
data <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/data_flow.csv", header = T)
radio <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt", header = T)
alb <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt", header = T)
View(data)
data <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/data_flow.csv", header = T, sep = ",")
radio <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt", header = T, sep = ",")
alb <- fread("/Users/lizzzi111/Desktop/DSG_2017/data/user_favourite_albums.txt", header = T, sep = ",")
shiny::runApp('Documents/Master/SoSe17/SPL/shiny')
runApp('Documents/Master/SoSe17/SPL/shiny')
runApp('Documents/Master/SoSe17/SPL/shiny')
shiny::runApp('Documents/Master/SoSe17/SPL/shiny')
runApp('Documents/Master/SoSe17/SPL/shiny')
runApp('Documents/Master/SoSe17/SPL/shiny')
flow = read.csv("./Desktop/data_flow.csv")
library(data.table)
flow = fread("./Desktop/data_flow.csv")
flow = fread("./Desktop/Data/data_flow.csv")
flow = fread("./Desktop/DSG_2017/data/data_flow.csv")
binary = read.csv2("./results_analysis/binary.csv")
getwd()
dt = read.csv2("./football2.csv", header = TRUE, dec = ",")
# Zeitstempel brauchen wir nicht
dt$Zeitstempel = NULL
dt$BMI = dt$Gewicht/((dt$Groesse/100)^2)
dt = droplevels(dt)
#par(mfrow=c(2,2))
boxplot(BMI~Spielposition, data=dt, main="Body-Mass Index",
xlab="Position", ylab="BMI")
boxplot(Gewicht~Spielposition, data=dt, main="Gewicht",
xlab="Position", ylab="Gewicht [kg]")
boxplot(Groesse~Spielposition, data=dt, main="Größe der Spielerinnen",
xlab="Position", ylab="Groesse [cm]")
boxplot(Schuhgroesse~Spielposition, data=dt, main="Schuhgr. der Sp.",
xlab="Position", ylab="Schuhgroesse")
# PCA
library(ggbiplot)
data.class = dt$Spielposition
data.pca = prcomp(dt[,c("Groesse","Gewicht","Schuhgroesse", "BMI")])
g = ggbiplot(data.pca, obs.scale = 1, var.scale = 1,
groups = data.class, ellipse = TRUE, circle = TRUE)
g = g + scale_color_discrete(name = '')
g = g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
# Preprocessing
# Since we want to examine rookies (new year players) we can drop QB and TE,
# TE is never given to a rookie, since you have to be able to know two positions
# Liner and WR
# QB is also given very seldom, very difficult position - "brain" of the offence
# we dropped 15 observations
dt = dt[dt$Spielposition!="TE" & dt$Spielposition!="QB",]
dt = droplevels(dt)
# OUTLIERS
library(dtplyr)
out = function(x, pos){
IQR = quantile(x[dt$Spielposition==pos], 0.75) - quantile(x[dt$Spielposition==pos], 0.25)
x[dt$Spielposition==pos] = ifelse(x[dt$Spielposition==pos] >
quantile(x[dt$Spielposition==pos], 0.75)+
1.5*IQR, mean(x[dt$Spielposition==pos]), x[dt$Spielposition==pos])
x[dt$Spielposition==pos] = ifelse(x[dt$Spielposition==pos] <
quantile(x[dt$Spielposition==pos], 0.25)-
1.5*IQR, mean(x[dt$Spielposition==pos]), x[dt$Spielposition==pos])
return(x)
}
dt$Gewicht = out(dt$Gewicht, "WR")
dt$Gewicht = out(dt$Gewicht, "OL")
dt$Gewicht = out(dt$Gewicht, "DB")
dt$Gewicht = out(dt$Gewicht, "LB")
dt$Gewicht = out(dt$Gewicht, "DL")
dt$Gewicht = out(dt$Gewicht, "RB")
dt$Groesse = out(dt$Groesse, "WR")
dt$Groesse = out(dt$Groesse, "OL")
dt$Groesse = out(dt$Groesse, "DB")
dt$Groesse = out(dt$Groesse, "LB")
dt$Groesse = out(dt$Groesse, "DL")
dt$Groesse = out(dt$Groesse, "RB")
dt$Schuhgroesse = out(dt$Schuhgroesse, "WR")
dt$Schuhgroesse = out(dt$Schuhgroesse, "OL")
dt$Schuhgroesse = out(dt$Schuhgroesse, "DB")
dt$Schuhgroesse = out(dt$Schuhgroesse, "LB")
dt$Schuhgroesse = out(dt$Schuhgroesse, "DL")
dt$Schuhgroesse = out(dt$Schuhgroesse, "RB")
dt$BMI = dt$Gewicht/((dt$Groesse/100)^2)
#par(mfrow=c(2,2))
boxplot(BMI~Spielposition, data=dt, main="Body-Mass Index",
xlab="Position", ylab="BMI")
boxplot(Gewicht~Spielposition, data=dt, main="Gewicht",
xlab="Position", ylab="Gewicht [kg]")
boxplot(Groesse~Spielposition, data=dt, main="Größe der Spielerinnen",
xlab="Position", ylab="Groesse [cm]")
boxplot(Schuhgroesse~Spielposition, data=dt, main="Schuhgr. d. Sp.",
xlab="Position", ylab="Schuhgroesse")
# PCA
library(ggbiplot)
data.class = dt$Spielposition
data.pca = prcomp(dt[,c("Groesse","Gewicht","Schuhgroesse", "BMI")])
g = ggbiplot(data.pca, obs.scale = 1, var.scale = 1,
groups = data.class, ellipse = TRUE, circle = TRUE)
g = g + scale_color_discrete(name = '')
g = g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
### TRAIN & TEST
test = dt[dt$Rookie!="nein",]
train = dt[dt$Rookie=="nein",]
summary(train)
summary(test)
source("smart_anova.R")
res.man <- manova(cbind(Gewicht, BMI, Groesse, Schuhgroesse) ~ Spielposition, data = train)
summary(res.man)
summary.aov(res.man)
smart_anova(train$BMI[train$Spielposition=="WR"| train$Spielposition=="DB"], train$Spielposition[train$Spielposition=="WR"| train$Spielposition=="DB"])
smart_anova(train$Gewicht[train$Spielposition=="WR"| train$Spielposition=="DB"], train$Spielposition[train$Spielposition=="WR"| train$Spielposition=="DB"])
smart_anova(train$Schuhgroesse[train$Spielposition=="WR"| train$Spielposition=="DB"], train$Spielposition[train$Spielposition=="WR"| train$Spielposition=="DB"])
smart_anova(train$Groesse[train$Spielposition=="WR"| train$Spielposition=="DB"], train$Spielposition[train$Spielposition=="WR"| train$Spielposition=="DB"])
dt$Spielposition = as.character(dt$Spielposition)
dt$Spielposition[dt$Spielposition=="WR"| dt$Spielposition=="DB"] = "WR_DB"
dt$Spielposition = as.factor(dt$Spielposition)
smart_anova(train$BMI[train$Spielposition=="LB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="LB"| train$Spielposition=="RB"])
smart_anova(train$Gewicht[train$Spielposition=="LB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="LB"| train$Spielposition=="RB"])
smart_anova(train$Schuhgroesse[train$Spielposition=="LB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="LB"| train$Spielposition=="RB"])
smart_anova(train$Groesse[train$Spielposition=="LB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="LB"| train$Spielposition=="RB"])
# cannot sum them
smart_anova(train$BMI[train$Spielposition=="OL"| train$Spielposition=="DL"], train$Spielposition[train$Spielposition=="OL"| train$Spielposition=="DL"])
smart_anova(train$Gewicht[train$Spielposition=="OL"| train$Spielposition=="DL"], train$Spielposition[train$Spielposition=="OL"| train$Spielposition=="DL"])
smart_anova(train$Schuhgroesse[train$Spielposition=="OL"| train$Spielposition=="DL"], train$Spielposition[train$Spielposition=="OL"| train$Spielposition=="DL"])
smart_anova(train$Groesse[train$Spielposition=="OL"| train$Spielposition=="DL"], train$Spielposition[train$Spielposition=="OL"| train$Spielposition=="DL"])
dt$Spielposition = as.character(dt$Spielposition)
dt$Spielposition[dt$Spielposition=="OL"| dt$Spielposition=="DL"] = "OL_DL"
dt$Spielposition = as.factor(dt$Spielposition)
smart_anova(train$BMI[train$Spielposition=="WR_DB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="WR_DB"| train$Spielposition=="RB"])
smart_anova(train$Gewicht[train$Spielposition=="WR_DB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="WR_DB"| train$Spielposition=="RB"])
smart_anova(train$Schuhgroesse[train$Spielposition=="WR_DB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="WR_DB"| train$Spielposition=="RB"])
smart_anova(train$Groesse[train$Spielposition=="WR_DB"| train$Spielposition=="RB"], train$Spielposition[train$Spielposition=="WR_DB"| train$Spielposition=="RB"])
dt$Spielposition = as.character(dt$Spielposition)
dt$Spielposition[dt$Spielposition=="WR_DB"| dt$Spielposition=="RB"] = "WR_DB_RB"
dt$Spielposition = as.factor(dt$Spielposition)
# Merkmalsreduktion
test = dt[dt$Rookie!="nein",]
train = dt[dt$Rookie=="nein",]
summary(train)
summary(test)
# Top Down Approach
library(class)
library(caret)
library(naivebayes)
X11
X11()
library(caret)
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
if (Sys.info()[8] == "lizzzi111")           {setwd("~/Documents/DSG_2017_Finals/")}
if (Sys.info()[8] == "kozodoi")             {setwd("~/Documents/Competitions/DSG_2017_Finals/")}
if (Sys.info()[8] == "nataliasverchkova")   {setwd("~/Documents/DSG/DSG_2017_Finals/")}
if (Sys.info()[8] == "oleksiyostapenko")    {setwd("/Users/oleksiyostapenko/Documents/HU_Berlin/ML/DSG/DSG_2017_Finals")}
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
if (require(pacman) == FALSE) install.packages("pacman")
library(pacman)
p_load(dplyr, data.table, caret, Metrics, xgboost, vtreat)
source(file.path(code.folder, "code_0_helper_functions.R"))
source(file.path(code.folder, "code_0_parameters.R"))
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
library(titanic)
fwrite(titanic_train, file.path(data.folder, "known.csv"))
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
data_known$id = seq(1,nrow(data_known))
data_known$id = NULL
data_known[, id:= .I]
View(data_known)
ts_lab[, (num_vars) := lapply(.SD, as.factor), .SDcols = num_vars]
data_known[, (num_vars) := lapply(.SD, as.factor), .SDcols = num_vars]
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
data_known[, id:= .I]
data_known[, Age := as.character(Age)]
summary(data_known)
data_known[, (num_vars) := lapply(.SD, as.factor), .SDcols = num_vars]
summary(data_known)
data_known[, (num_vars) := lapply(.SD, as.numeric), .SDcols = num_vars]
summary(data_known)
data_known =  fread(file.path(data.folder, "known.csv"), sep = ",", dec = ".", header = TRUE, stringsAsFactors = F)
data_known[, id:= .I]
data_known[, (num_vars) := lapply(.SD, function(x) as.numeric(as.character(x))), .SDcols = num_vars]
data_known[fac_vars] <- lapply(data_known[fac_vars], function(x) factor(x))
data_known[, (fac_vars) := lapply(.SD, factor(x)), .SDcols = fac_vars]
data_known[, (fac_vars) := lapply(.SD, factor), .SDcols = fac_vars]
summary(data_known)
idx <-  caret::createDataPartition(data_known[,dv], p = 0.8, list = FALSE)
idx <-  caret::createDataPartition(data_known[,.dv], p = 0.8, list = FALSE)
idx <-  caret::createDataPartition(data_known[,.dv, with = FALSE], p = 0.8, list = FALSE)
idx <-  caret::createDataPartition(data_known[,dv, with = FALSE], p = 0.8, list = FALSE)
data_known[,dv, with = FALSE]
idx <-  caret::createDataPartition(data_known[, dv, with = FALSE], p = 0.8, list = FALSE)
ff = data_known[, dv, with = FALSE]
idx <-  caret::createDataPartition(data_known[, .SD, .SDcols = dv], p = 0.8, list = FALSE)
data_known[, .SD, .SDcols = dv]
idx <-  caret::createDataPartition(unlist(data_known[, .SD, .SDcols = dv]), p = 0.8, list = FALSE)
idx
data_known[-idx, part := "valid" ]
data_known[idx, part :=  "train" ]
data_known
